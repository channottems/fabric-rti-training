{
  "queryset": {
    "version": "1.0.0",
    "dataSources": [
      {
        "id": "e57a218a-d22d-44c7-a78c-5124395cf0e9",
        "clusterUri": "",
        "type": "Fabric",
        "databaseItemId": "46562685-b7e7-83ec-493e-e7f51d9e03d5",
        "databaseItemName": "Zava_eventhouse"
      }
    ],
    "tabs": [
      {
        "id": "fd971add-7c53-4d80-b380-01aad12fba52",
        "content": "//***********************************************************************************************************\n// Here are two articles to help you get started with KQL:\n// KQL reference guide - https://aka.ms/KQLguide\n// SQL - KQL conversions - https://aka.ms/sqlcheatsheet\n//***********************************************************************************************************\n\n\n\n// Use \"take\" to view a sample number of records in the table and check the data.\nClickstream_New\n| count\n\n\nClickstream_New\n| take 10\n\n// Creation de la requete pour le top 3\nClickstream_New\n| summarize total_click_by_sku = sum(COUNT_event_id) by sku\n| top 3 by total_click_by_sku desc\n| project sku\n\n\nClickstream_New\n| summarize total_click_by_sku = sum(COUNT_event_id) by sku\n| order by total_click_by_sku desc\n| extend Rank=row_number(1)\n| where Rank <= 3\n| project sku\n\n.set-or-replace MyStagingTable <| V_TOP3SKU_BY_CLICK\n\nMyStagingTable\n| take 100\n\n// Creation de la vue\n.create-or-alter function \n    with (view=true, docstring='TOP 3 Sku by produt and click')  \n    V_TOP3SKU_BY_CLICK() { Clickstream_New\n| summarize total_click_by_sku = sum(COUNT_event_id) by sku\n| order by total_click_by_sku desc\n| take 3\n| project sku }\n\n// Creation de la vue\n.create-or-alter function \n    with (view=true, docstring='TOP 1 Referral Platform')  \n    V_TOP1REFERRAL_BY_CLICK() { Clickstream_New\n| summarize totalRedirects=count() by referral_platform\n| top 1 by totalRedirects desc }\n\n\n.create-or-alter function \n    with (view=true, docstring='TOP 1 Referral Platform')  \n    V_TOP1REFERRAL_BY_CLICK() { Clickstream_New\n| summarize totalRedirects=count() by referral_platform\n| top 1 by totalRedirects desc }\n\n.create-or-alter function \n    with (view=true, docstring='TOP 1 on demande product')  \n    V_TOP1OnDemandProduct() { Clickstream_New\n| summarize totalClicks=sum(COUNT_event_id) by sku\n| top 1 by totalClicks desc\n| join kind=leftouter (Product_Struct | project SKU, ProductName) on $left.sku == $right.SKU\n| project ProductName, sku, totalClicks }\n\n\n\n// Check de la vue\nV_TOP3SKU_BY_CLICK\n| take 10\n\n\nProduct\n| project schema\n\nProduct\n| take 10\n\n// Drop de la table \n.drop table Product_Struct\n\n// Create de la table\n.create table Product_Struct (ProductId:string, ProductName:string, SKU:string, Brand:string, Category:string, UnitCost:real )\n\n// Creation de la fonction pour update policy\n.create-or-alter function\nwith (docstring = 'explode JSON', folder = 'UpdatePolicyFunctions')\n     Product_to_product_struct()  \n    {\n    Product\n    | mv-expand payload\n    | where isnotnull(payload.after.ProductId)\n    | project ProductId=tostring(payload.after.ProductId),ProductName=tostring(payload.after.ProductName),SKU=tostring(payload.after.SKU),Brand=tostring(payload.after.Brand),Category=tostring(payload.after.Category),UnitCost=toreal(payload.after.UnitCost)\n    }\n\n// Set de l'update policy\n.alter table Product_Struct policy update \n@'[{ \"IsEnabled\": true, \"Source\": \"Product\", \"Query\": \"Product_to_product_struct()\", \"IsTransactional\": true, \"PropagateIngestionProperties\": false}]'\n\n.clear table Product_Struct\n.drop table Product_Struct_1\n\n.set-or-replace Product_Struct <| Product_Struct_1 | distinct *\n\nProduct_Struct\n| count\n\n// Rechargement des données car pas de backfill sur update policy\n.set-or-append Product <| Product\n\nProduct\n| take 100\n\nProduct_Struct\n| take 100\n| extend UnitCost_Upd=(UnitCost*1.15)\n| project UnitCost,UnitCost_Upd,SKU\n\n\n\n.update table Product_Struct delete Top3delete append Top3Update <|\n    let Top3delete = Product_Struct\n        | extend sku = SKU\n        | join kind=leftsemi MyStagingTable on sku\n        | where true;\n    let Top3Update = Top3delete\n        | extend UnitCost=toreal(UnitCost * 1.15);\n\nClickstream_New\n| summarize total_clicks_by_referral_source = sum(COUNT_event_id) by referral_platform\n| top 1 by total_clicks_by_referral_source desc\n| project referral_platform, total_clicks_by_referral_source\n\nManufacturing_with_timestamp\n| take 10\n\nlet min_t = toscalar(ManufacturingTypes | summarize min(todatetime(timestamp)));\nlet max_t = toscalar(ManufacturingTypes | summarize max(todatetime(timestamp)));\nlet step_interval = 1min;\nManufacturingTypes\n| where todatetime(timestamp) between (min_t..max_t)\n| where AnomalyFlag == true\n//| summarize high_def=max(DefectProbability) by bin(todatetime(timestamp), 1h),SKU\n| make-series Avg_temp=avg(Temperature) on (todatetime(timestamp)) from (min_t) to (max_t) step step_interval \n| extend Forecast_Avg_Temp = series_decompose_forecast(Avg_temp,7,7) \n| render timechart with(title='Forecast Average Temperature') \n\n\nManufacturingTypes\n| take 1000",
        "title": "Tab",
        "dataSourceId": "e57a218a-d22d-44c7-a78c-5124395cf0e9"
      },
      {
        "id": "7b2169bc-34d0-4860-a414-6e76da0e8c9a",
        "content": "\n.create table ShippingEventsSilver (\n    Provider: string,\n    OrderNumber: string,\n    EventTime: datetime,\n    Status: string,\n    DelayReason: string,\n    AnomalyFlag: bool,\n    SourceCity: string,\n    SourceCountry: string,\n    SourceLatitude: real,\n    SourceLongitude: real,\n    DestinationName: string,\n    DestinationStreet: string,\n    DestinationCity: string,\n    DestinationZip: string,\n    DestinationCountry: string\n)\n\n\n\n.create function with (folder = \"Shipping\", docstring = \"Parse XML shipping events\") ParseShippingEvent() {\n    ShippingEventsRaw\n    | extend xml = parse_xml(data)\n    | project\n        Provider = tostring(xml.ShippingEvent.Provider),\n        OrderNumber = tostring(xml.ShippingEvent.OrderNumber),\n        EventTime = todatetime(xml.ShippingEvent.EventTime),\n        Status = tostring(xml.ShippingEvent.Status),\n        DelayReason = tostring(xml.ShippingEvent.DelayReason),\n        AnomalyFlag = tobool(xml.ShippingEvent.AnomalyFlag),\n        SourceCity = tostring(xml.ShippingEvent.SourceDistributionCenter.City),\n        SourceCountry = tostring(xml.ShippingEvent.SourceDistributionCenter.Country),\n        SourceLatitude = todouble(xml.ShippingEvent.SourceDistributionCenter.Latitude),\n        SourceLongitude = todouble(xml.ShippingEvent.SourceDistributionCenter.Longitude),\n        DestinationName = tostring(xml.ShippingEvent.DestinationAddress.Name),\n        DestinationStreet = tostring(xml.ShippingEvent.DestinationAddress.Street),\n        DestinationCity = tostring(xml.ShippingEvent.DestinationAddress.City),\n        DestinationZip = tostring(xml.ShippingEvent.DestinationAddress.Zip),\n        DestinationCountry = tostring(xml.ShippingEvent.DestinationAddress.Country)\n}\n\n\n\n.alter table ShippingEventsSilver policy update\n@'[{\"IsEnabled\": true, \"Source\": \"Shipping\", \"Query\": \"ParseShippingEvent()\"}]'\n\n\n\n// Rechargement des données car pas de backfill sur update policy\n.set-or-append Shipping <| Shipping",
        "title": "Shipping_Silver",
        "dataSourceId": "e57a218a-d22d-44c7-a78c-5124395cf0e9"
      }
    ]
  }
}
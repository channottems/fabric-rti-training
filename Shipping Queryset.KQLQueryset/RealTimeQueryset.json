{
  "queryset": {
    "version": "1.0.0",
    "dataSources": [
      {
        "id": "6cdf5c04-83fb-4d63-8d0f-d1618b209b14",
        "clusterUri": "",
        "type": "Fabric",
        "databaseItemId": "46562685-b7e7-83ec-493e-e7f51d9e03d5",
        "databaseItemName": "Zava_eventhouse"
      }
    ],
    "tabs": [
      {
        "id": "e069a130-a07d-4b8b-9d32-2d1030cb75e6",
        "content": "\n\n['Shipping-blob']\n\n\n.create table ShippingBlobEventsSilver (\n    Provider: string,\n    OrderNumber: string,\n    EventTime: datetime,\n    Status: string,\n    DelayReason: string,\n    AnomalyFlag: bool,\n    SourceCity: string,\n    SourceCountry: string,\n    SourceLatitude: real,\n    SourceLongitude: real,\n    DestinationName: string,\n    DestinationStreet: string,\n    DestinationCity: string,\n    DestinationZip: string,\n    DestinationCountry: string,\n    DestinationLatitude: real,\n    DestinationLongitude: real,\n    WeightKg: real,\n    ProductId: string,\n    Size: int,\n    Quantity: int\n)\n\n\n\n.create function with (\n    folder = \"Shipping\", \n    docstring = \"Parse XML shipping events\"\n) ParseShippingEvent() {\n    ['Shipping-blob']\n    | extend xml = parse_xml(data)\n    | project\n        Provider = tostring(xml.ShippingEvent.Provider),\n        OrderNumber = tostring(xml.ShippingEvent.OrderNumber),\n        EventTime = todatetime(xml.ShippingEvent.EventTime),\n        Status = tostring(xml.ShippingEvent.Status),\n        DelayReason = tostring(xml.ShippingEvent.DelayReason),\n        AnomalyFlag = tobool(xml.ShippingEvent.AnomalyFlag),\n        SourceCity = tostring(xml.ShippingEvent.SourceDistributionCenter.City),\n        SourceCountry = tostring(xml.ShippingEvent.SourceDistributionCenter.Country),\n        SourceLatitude = todouble(xml.ShippingEvent.SourceDistributionCenter.Latitude),\n        SourceLongitude = todouble(xml.ShippingEvent.SourceDistributionCenter.Longitude),\n        DestinationName = tostring(xml.ShippingEvent.DestinationAddress.Name),\n        DestinationStreet = tostring(xml.ShippingEvent.DestinationAddress.Street),\n        DestinationCity = tostring(xml.ShippingEvent.DestinationAddress.City),\n        DestinationZip = tostring(xml.ShippingEvent.DestinationAddress.Zip),\n        DestinationCountry = tostring(xml.ShippingEvent.DestinationAddress.Country),\n        DestinationLatitude = todouble(xml.ShippingEvent.DestinationAddress.Latitude),\n        DestinationLongitude = todouble(xml.ShippingEvent.DestinationAddress.Longitude),\n        WeightKg = todouble(xml.ShippingEvent.WeightKg),\n        ProductId = tostring(xml.ShippingEvent.ShippingContents.Product.ProductId),\n        Size = toint(xml.ShippingEvent.ShippingContents.Product.Size),\n        Quantity = toint(xml.ShippingEvent.ShippingContents.Product.Quantity)\n}\n\n\n\n.alter table ['ShippingBlobEventsSilver'] policy update @'[]'\n\n\n.alter table ShippingBlobEventsSilver policy update\n@'[{\"IsEnabled\": true, \"Source\": \"Shipping-blob\", \"Query\": \"ParseShippingEvent()\"}]'\n\n\n// Rechargement des donn√©es car pas de backfill sur update policy\n.set-or-append ['Shipping-blob'] <| ['Shipping-blob']\n\n\nShippingBlobEventsSilver\n\n['Shipping-blob']\n\n.create materialized-view with (backfill = true) LatestOrderStatus on table ShippingBlobEventsSilver\n{\n    ShippingBlobEventsSilver\n    | summarize arg_max(EventTime, *) by OrderNumber\n}\n\nLatestOrderStatus\n| project OrderNumber, Status, EventTime, DelayReason\n\n\nShippingBlobEventsSilver\n\nProduct, Operators , ShippingBlobEventsSilver, Shipping_Provider_Details, Manufacturing\n\nProduct_Struct et Manufacturing sur ProductId\n| getschema \n\n\nProduct_Struct\n| getschema  sur ProviderId\n\n\nShipping_Provider_Details\n| getschema \nsur ProviderId / Provider \n\nShippingBlobEventsSilver\n| getschema  sur Provider\n\nManufacturing\n| getschema sur ProductId / OperatorID\n\nexternal_table('operators')\n| getschema sur OperatorId\n\n\n\n.create function with (\n    folder = \"Shipping\", \n    docstring = \"Global join across manufacturing and shipping data\"\n) GlobalShippingJoin() {\n    Manufacturing\n    | join kind=inner (\n        external_table('operators')\n    ) on OperatorId\n    | join kind=inner (\n        Product_Struct\n    ) on ProductId\n    | join kind=inner (\n        ShippingBlobEventsSilver\n    ) on ProductId\n    | join kind=inner (\n        Shipping_Provider_Details\n    ) on Provider\n}\n\n\nGlobalShippingJoin()\n\nManufacturing | take 10\nexternal_table('operators') | take 10\nProduct_Struct | take 10\nShippingBlobEventsSilver | take 10\nShipping_Provider_Details | take 10\n\n\nManufacturing\n| join kind=inner (\n    external_table('operators')\n) on OperatorId\n\n\nManufacturing\n| join kind=inner (\n    Product_Struct\n) on ProductId\n| take 10\n\n\nProduct_Struct\n| join kind=inner (\n    ShippingBlobEventsSilver\n) on ProductId\n| take 10\n\n\n\nShippingBlobEventsSilver\n| join kind=left (\n    Shipping_Provider_Details\n) on Provider\n| take 10\n\n\nShippingBlobEventsSilver\n| extend ProviderClean = trim(\" \", tolower(Provider))\n| join kind=inner (\n    Shipping_Provider_Details\n    | extend ProviderClean = trim(\" \", tolower(Provider))\n) on ProviderClean\n| project OrderNumber, Provider, Status, EventTime, DelayReason, SourceCity, DestinationCity\n| take 10\n\n\n.create function with (\n    folder = \"Shipping\", \n    docstring = \"Global join with cleaned Provider values\"\n) GlobalShippingJoinCleaned() {\n    Manufacturing\n    | join kind=inner (\n        external_table('operators')\n    ) on OperatorId\n    | join kind=inner (\n        Product_Struct\n    ) on ProductId\n    | join kind=inner (\n        ShippingBlobEventsSilver\n        | extend ProviderClean = trim(\" \", tolower(Provider))\n    ) on ProductId\n    | join kind=inner (\n        Shipping_Provider_Details\n        | extend ProviderClean = trim(\" \", tolower(Provider))\n    ) on ProviderClean\n}\n\nexternal_table('operators')\n\nGlobalShippingJoinCleaned()\n\n\n\n.create function with (\n    folder = \"Alerts\", \n    docstring = \"Detect shipping anomalies and return provider details\"\n) ShippingAnomalyAlert() {\n    GlobalShippingJoinCleaned()\n    | where AnomalyFlag == true or DelayReason != \"None\"\n    | project \n        OrderNumber,\n        ProductName,\n        Provider,\n        Phone,\n        SiteId\n}\n\nShippingAnomalyAlert()",
        "title": "",
        "dataSourceId": "6cdf5c04-83fb-4d63-8d0f-d1618b209b14"
      }
    ]
  }
}